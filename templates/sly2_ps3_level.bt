
//
// Initialization
//

LittleEndian();
DisplayFormatHex();

//
// Utility functions
//

void hexdump(int64 pos, int n) {
    local uchar buf[n];
    ReadBytes(buf, pos, n);

    local int i;
    for (i = 0; i < n; ++i) {
        Printf("%02X", buf[i]);
        if (i % 4 == 3)
            Printf(" ");
    }
}

//
// Common types
//

typedef ubyte bool;
typedef ubyte u8;
typedef uint16 u16;
typedef uint32 u32;
typedef uint64 u64;
typedef byte s8;
typedef int16 s16;
typedef int32 s32;
typedef int64 s64;
typedef float f32;
typedef double f64;

typedef struct bvec4_t
{
    uchar x, y, z, w;
} bvec4 <read=read_bvec4, bgcolor=cLtBlue>;
string read_bvec4(bvec4 &v) {
    string s;
    SPrintf(s, "[%02X %02X %02X %02X]",
        v.x, v.y, v.z, v.w);
    return s;
}

typedef struct vec2_t
{
    float x, y;
} vec2 <read=read_vec2, bgcolor=cPurple>;
string read_vec2(vec2 &v) {
    string s;
    SPrintf(s, "[%7.3f \t%7.3f]",
        v.x, v.y);
    return s;
}

typedef struct vec3_t
{
    float x, y, z;
} vec3 <read=read_vec3, bgcolor=cDkPurple>;
string read_vec3(vec3 &v) {
    string s;
    SPrintf(s, "[%7.3f \t%7.3f \t%7.3f]",
        v.x, v.y, v.z);
    return s;
}

typedef struct uvec3_t
{
    uint32 x, y, z;
} uvec3 <read=read_uvec3, bgcolor=cDkBlue>;
string read_uvec3(uvec3 &v) {
    string s;
    SPrintf(s, "[%d %d %d]",
        v.x, v.y, v.z);
    return s;
}

typedef struct vec4_t
{
    float x, y, z, w;
} vec4 <read=read_vec4, bgcolor=cDkPurple>;
string read_vec4(vec4 &v) {
    string s;
    SPrintf(s, "[%7.3f \t%7.3f \t%7.3f \t%7.3f]",
        v.x, v.y, v.z, v.w);
    return s;
}

typedef struct svec2_t
{
    uint16 x, y;
} svec2 <read=read_svec2, bgcolor=cDkBlue>;
string read_svec2(svec2 &v) {
    string s;
    SPrintf(s, "[%d %d %d]", v.x, v.y);
    return s;
}

typedef struct align_t (int alignment) {
    local int val = FTell();
    local int pad_size = (-val) & (alignment - 1);
    if (pad_size != 0)
        byte pad[pad_size];
} align <optimize=false>;


//
// Level Tables / Initial structs
//

typedef struct FkString_t {
    char fk_str[4];
    char name[60];    
} FkString <read=read_FkString, bgcolor=cLtRed>;
string read_FkString(FkString& v) {
    string s;
    SPrintf(s, "%c | %s", v.fk_str[3], v.name);
    return s;
}

typedef struct Object_t {
    FkString name;

    //Printf("%40s ", name);
    //hexdump(FTell(), 6*2);

    uint32 unk_u32_0;
    uint32 unk_u32_1;
    uint32 unk_u32_2;
    uint32 unk_u32_3;
    uint32 count;
} Object <read=read_Object, optimize=false>;
string read_Object(Object &v) {
    string s;
    SPrintf(s, "%X | %X | %08X | %08X | %02X | %s",
        v.unk_u32_0, v.unk_u32_1, v.unk_u32_2, v.unk_u32_3, v.count, read_FkString(v.name));
    return s;
}

typedef struct ObjectArray_t {
    uint16 object_count;
    Object obj[object_count];
} ObjectArray <bgcolor=cDkPurple>;

typedef struct StringArrayEntry_t {
    uint16 id; // maybe
    uint16 str_len;
    char name[str_len];
} StringArrayEntry <read=read_StringArrayEntry, bgcolor=cDkGreen, optimize=false>;
string read_StringArrayEntry(StringArrayEntry &v) {
    local string s;
    SPrintf(s, "0x%04X (%04d) | %s", v.id, v.id, v.name);
    return s;
}

struct StringArray {
    uint16 count;
    StringArrayEntry string_entry[count];
};

typedef struct Unk0Entry_t {
    ushort unk[5] <open=true>;
} Unk0Entry <read=read_Unk0Entry>;
string read_Unk0Entry(Unk0Entry& v) {
    string s;
    SPrintf(s, "%04X %04X %04X %04X %04X",
        v.unk[0], v.unk[1], v.unk[2], v.unk[3], v.unk[4]);
    return s;
}

struct Unk0Table {
    uint16 unk0_entry_count;
    Unk0Entry unk0_entry[unk0_entry_count] <bgcolor=cDkAqua>;
};

typedef struct World_t {
    FkString name;

    u8 world_id;
    u8 level_id;
    bool is_exterior;
    u8 e3_cnt;
    u16 e3[e3_cnt];
} World <read=read_World, optimize=false, bgcolor=cDkRed>;
string read_World(World& v) {
    string s;
    SPrintf(s, "%02X %02X %02X %02X | %c%c%c%c | %s",
        v.world_id, v.level_id, v.is_exterior, v.e3_cnt, v.e3[0], v.e3[1], v.e3[2], v.e3[3],
        read_FkString(v.name));
    return s;
}

struct WorldArray {
    u32 count;
    u32 unk;

    World w[count];
};

//
// Meshes
//

// SZMS stuff

typedef struct szms_header_t
{
    char magic[4] <hidden=true>;
    Assert(magic[0] == 'S' && magic[1] == 'Z' && magic[2] == 'M' && magic[3] == 'S');
    uint32 version <hidden=true>;
    Assert(version == 4);
    uint32 data_size;
} szms_header <read=read_szms_header, bgcolor=cYellow, optimize=false>;
string read_szms_header(szms_header &v) {
    string s;
    SPrintf(s, "size: %05X", v.data_size);
    return s;
}

typedef struct mesh_header_t
{
    uint32 unknown_0x00 <bgcolor=cAqua>;
    uint16 unknown_0x04 <bgcolor=cAqua>;
    uint16 mesh_count <format=decimal>;
    uint32 mesh_offsets[mesh_count];
} mesh_header <read=read_mesh_header, bgcolor=cBlue, optimize=false>;
string read_mesh_header(mesh_header &v) {
    string s;
    //SPrintf(s, "mesh#: %d unk0: 0x%08X unk1: 0x%04X",
    //    v.mesh_count, v.unknown_0x00, v.unknown_0x04);
    SPrintf(s, "mesh#: %d", v.mesh_count);
    return s;
}

typedef struct vertex_t
{
    vec3 pos;
    vec3 normal;
    vec2 texcoord;
    uint32 color;
} vertex <read=read_vertex, bgcolor=cLtPurple, optimize=false>;
string read_vertex(vertex &v) {
    string s;
    SPrintf(s, "[%7.2f \t%7.2f \t%7.2f] [%4.3f \t%4.3f \t%4.3f] [%4.3f \t%4.3f] \t0x%08X",
        v.pos.x, v.pos.y, v.pos.z, v.normal.x, v.normal.y, v.normal.z,
        v.texcoord.x,  v.texcoord.y, v.color);
    return s;
}

typedef struct vertex_header_t
{
    uint32 unknown_0x10  <bgcolor=cAqua>;
    uint16 vertex_count  <format=decimal>;
    uint16 unknown_count <format=decimal, bgcolor=cAqua>;
    uint32 vertex_data_offset;
    uint32 index_header_offset;

    local uint32 vertex_data_size = index_header_offset - vertex_data_offset;

    // Sanity-check that all verts are of the size we assume
    local uint32 vertex_single_size = vertex_data_size / vertex_count;
    Assert(vertex_single_size == sizeof(vertex_t));
} vertex_header <read=read_vertex_header, bgcolor=cLtYellow, optimize=false>;
string read_vertex_header(vertex_header &v) {
    string s;
    SPrintf(s, "vtx#: %d unk#: %d vtx_off: 0x%X idx_off: 0x%X vtx_data_size: 0x%X",
        v.vertex_count, v.unknown_count, v.vertex_data_offset, v.index_header_offset, v.vertex_data_size);
    return s;
}

typedef struct index_header_t
{
    uint16 triangle_count <format=decimal>;
    uint16 index_count    <format=decimal>;
    uint32 triangle_data_offset;
    uint32 index_data_offset;
} index_header <read=read_index_header, bgcolor=cRed>;
string read_index_header(index_header &v) {
    string s;
    SPrintf(s, "tri#: %d idx#: %d off1: 0x%X off2: 0x%X",
        v.triangle_count, v.index_count, v.triangle_data_offset, v.index_data_offset);
    return s;
}

typedef struct index_data_t(int64 start_offset)
{
    index_header index_hdr1;
    index_header index_hdr2;

    FSeek(start_offset + index_hdr1.triangle_data_offset);
    uint16  triangle_data1[index_hdr1.triangle_count * 3];

    FSeek(start_offset + index_hdr1.index_data_offset);
    uint16  index_data1[index_hdr1.index_count];

    // Same deal
    FSeek(start_offset + index_hdr2.triangle_data_offset);
    if (index_hdr2.triangle_count > 0)
        uint16  triangle_data2[index_hdr2.triangle_count * 3];

    FSeek(start_offset + index_hdr2.index_data_offset);
    uint16  index_data2[index_hdr2.index_count];
} index_data <read=read_index_data, bgcolor=cDkGreen, optimize=false>;
string read_index_data(index_data &v) {
    string s;
    SPrintf(s, "");
    return s;
}

typedef struct vertex_data_t(int64 start_offset)
{
    vertex_header vertex_hdr;

    FSeek(start_offset + vertex_hdr.vertex_data_offset);
    vertex vertices[vertex_hdr.vertex_count];

    FSeek(start_offset + vertex_hdr.index_header_offset);
    index_data index_hdr(start_offset);
} vertex_data <read=read_vertex_data, bgcolor=cDkAqua, optimize=false>;
string read_vertex_data(vertex_data &v) {
    string s;
    SPrintf(s, "");
    return s;
}

// SZME stuff

typedef struct e2_t {
    u32 f0;
    u16 f1;
} e2;

typedef struct j10_t {
    u16 j1_cnt;
    svec2 j1;
} j10 <optimize=false, bgcolor=cDkRed>;

typedef struct j9_t  {
    u16 j0_cnt;

    if (j0_cnt > 0)
        j10 j0_[j0_cnt];
} j9 <optimize=false, bgcolor=cDkGreen>;

typedef struct k11_t {
    u16 k0;
    u16 k1;
    u8 k2;
} k11 <optimize=false, bgcolor=cDkGreen>;

typedef struct k10_t {
    u16 k11_cnt;
    k11 k11_[k11_cnt];
} k10 <optimize=false, bgcolor=cDkRed>;

struct k13 {
    u16 k0_cnt;
    if (k0_cnt > 0) {
        k10 k0_[k0_cnt];
        u16 k12_cnt;
        u16 k12[k12_cnt];
    }
};

typedef struct mesh_instance_t (u8 i0) {
    u8 g0;

    if (i0 == 0)
        u32 g1;
    u16 g2;
    
    vec3 g3_mat4_0;
    vec3 g3_mat4_1;
    vec3 g3_mat4_2;
    vec3 g3_mat4_3;

    u32 g4;

    u8 g5_ign;

    k13 k13_;
} mesh_instance <optimize=false, bgcolor=cBlue>;

u8 min(u8 x, u8 y) {
    if (x < y)
        return x;
    else
        return y;
}

typedef struct szme_data_t (u8 flags, u16 instance_cnt, u8 e2_cnt, u8 i0) {
    u8 a0_cnt;

    local uint a0_unk_cnt = 0;

    local int i = 0;
    for (i = 0; i < a0_cnt; i++) {
        uvec3 a0;
        a0_unk_cnt += a0.x;
    }

    u8 vertex_count;
    if (vertex_count > 0) {
        vec3 positions[vertex_count];
        vec2 texcoords[vertex_count];
        vec3 normals[vertex_count];
        uint32 a4[vertex_count];
    }

    u8 a5;

    if (e2_cnt != 0) {
        u8 a7[4];

        local u8 e2_cnt_mn = min(e2_cnt, 4);
        u8 a8[vertex_count * e2_cnt_mn];
    }

    if (a0_unk_cnt > 0)
        u8 indices_unk[a0_unk_cnt];

    local u32 uVar28 = a0_unk_cnt + 0x1f;
    local u32 a6_uint_cnt = ((int)uVar28 >> 5) + (uint)((int)uVar28 < 0 && (uVar28 & 0x1f) != 0);
    if (a6_uint_cnt > 0)
        u32 a6[a6_uint_cnt];

// TODO: remove?
    //if (instance_cnt > 0)
    //    u2 u2_ (flags, i0) [instance_cnt];
} szme_data <optimize=false, bgcolor=cYellow>;

typedef struct d9_t {
    u16 d9_0;
    u16 d9_1;
    u8 d9_2;
} d9 <optimize=false, bgcolor=cLtRed>;

typedef struct d7_t {
    u16 d9_cnt;
    if (d9_cnt > 0)
        d9 d9_[d9_cnt];
} d7 <optimize=false, bgcolor=cLtBlue>;

typedef struct szme_t (u16 instance_cnt, u8 i0) {
    char magic[4] <hidden=true>;
    Assert(magic[0] == 'S' && magic[1] == 'Z' && magic[2] == 'M' && magic[3] == 'E');

    u8 flags;
    u16 e1;
    u8 e2_cnt;
    if (e2_cnt > 0)
        e2 e2_[e2_cnt];
    
    u8 e3;

    if (e3 != 0xFF) {
        vec3 e4;
        vec2 e5;
        vec3 e6;
    }

    k13 k13_;

    if ((flags & 4) != 0) {
        u32 e7;
        u8 e8;

        if (e8 != 0xFF) {
            u32 e9;
            u32 e10;
            u32 e11;
            u32 e12;

            vec3 e13_mat4_0;
            vec3 e13_mat4_1;
            vec3 e13_mat4_2;
            vec3 e13_mat4_3;
        }

        u8 e14;
        u8 e15;
        u8 e16;
    }

    u16 szme_data_cnt;
    szme_data szme_data_ (flags, instance_cnt, e2_cnt, i0) [szme_data_cnt];
} szme <optimize=false, bgcolor=cLtGreen>;
string read_szme_t(szme_t &v) {
    string s;
    if ((g_flags & 1) == 0) {
        SPrintf(s, "szme#: %d", v.mesh_count);
    }
    return s;
}

typedef struct mesh_data_t0_t (u16 instance_cnt, u8 i0) {
    szms_header szms;

    local int64 start_offset = FTell();

    mesh_header mesh_hdr;

    local uint32 i = 0;
    for (i = 0; i < mesh_hdr.mesh_count; ++i) {
        FSeek(start_offset + mesh_hdr.mesh_offsets[i]);

        vertex_data vertex_data_(start_offset);
    }

    szme szme_ (instance_cnt, i0);
} mesh_data_t0 <open=true, bgcolor=cDkRed, open=true>;

typedef struct mesh_data_t3_t {
    u8 p0_cnt;
    if (p0_cnt > 0) {
        struct {
            u32 p1;
            u32 p2;
        } p0[p0_cnt];
    }

    u16 p3_cnt;
    if (p3_cnt > 0) {
        struct p3_t {
            u16 p4;
            u8 p5_cnt;
            u8 p6_cnt;
            if (p6_cnt > 0)
                vec3 p6[p6_cnt];
    
            if (p0_cnt > 0) {
                u8 p7[4];
        
                local int p0_cnt_n = p0_cnt;
                if (p0_cnt > 3)
                    p0_cnt_n = 4;
    
                u8 p8[p0_cnt_n * p6_cnt];
            };
            if (p5_cnt > 0)
                u8 p5[p5_cnt];

            local uint p9_cnt = ((int)(p5_cnt + 0x1f) >> 5);            
            if (p6_cnt > 0)
                u32 p6_2[p9_cnt];

        } p3[p3_cnt] <optimize=false>;
    }
} mesh_data_t3 <open=true, bgcolor=cDkGreen, open=true>;

local int skip_mco = false;

typedef struct mesh_data_t (ubyte i0)
{
    ubyte u0;

    if (u0 == 0) {
        ubyte type;
        uint16 instance_cnt;
        uint16 idx_to_mco_c2;
        ubyte u3_;
        f32 u4;
        f32 u5;
        uint32 u6;
        ubyte u7_ign;
        ubyte u8_;

        if (i0 == 0) {
            vec3 occl_sphere_pos;     // sphere pos? (used for view frustum culling?)
            float occl_sphere_radius; // sphere radius? (used for view frustum culling?)
            u32 u11;
            float u12;
        }
        if (type == 0) {
             mesh_data_t0 t0 (instance_cnt, i0);
        } else if (type == 1) {
            //Assert(false, "type == 1"); // TODO
            Printf("[%06X] TODO: type == 1\n", FTell());
            skip_mco = true;
            u8 dummy_type_1;
        } else if (type == 2) {
            //Assert(false, "type == 2"); // TODO
            Printf("[%06X] TODO: type == 2\n", FTell());
            skip_mco = true;
            u8 dummy_type_2;
        } else if (type == 3) {
             mesh_data_t3 t3;
        } else {
            Assert(false);
        }
        if (skip_mco)
            break;
        if (instance_cnt > 0)
            mesh_instance instance (i0) [instance_cnt];
    } else {
        u16 u1_alt[u0];
        u32 u2_ign_cnt;
        if (u2_ign_cnt > 0)
            u8 u2_ign[u2_ign_cnt];
    }
} mesh_data <read=read_mesh_data, bgcolor=cDkYellow, optimize=false>;
string read_mesh_data(mesh_data &v) {
    string s;
    if (v.u0 == 0) {
        SPrintf(s, "type: %d instance#: %d", v.type, v.instance_cnt);
    } else {
        SPrintf(s, "u0: %d", v.u0);
    }
    return s;
}

typedef struct o_t {
    u8 o1;

    if (o1 != 0xFF) {
        vec3 o2;
        f32 o3;
        f32 o4;
        u8 o5;
        u16 o6;
    }
} o <bgcolor=cLtGreen, optimize=false>;

typedef struct mesh_data_unk3_t {
    u16 count;

    if (count != 0) {       
        // TODO
        skip_mco = true;
        u8 dummy_unk3;
        break;
    }

    local int i = 0;
    while (i < count) {
        o o_;
        if (o_.o1 != 0xFF)
            i++;
    }
} mesh_data_unk3 <bgcolor=cGreen, optimize=false>;

typedef struct i3_t {
    u16 i3_0;
    u8 i3_1[0x20];
} i3 <bgcolor=cBlue, optimize=false>;

typedef struct mesh_container_t {
    ubyte i0;
    vec3 occl_sphere_pos;  // sphere pos? (used for view frustum culling?)
    float occl_sphere_radius; // sphere radius? (used for view frustum culling?)
    ubyte i3_cnt;
    if (i3_cnt > 0)
        i3 i3_[i3_cnt];
    ubyte i4;

    uint16 mesh_count <bgcolor=cRed>;
    local int i = 0;
    local int mesh_count_actual = 0;
    local int do_break = false;
    while (i < mesh_count) {
        mesh_data mesh (i0);
        mesh_count_actual++;
        if (skip_mco) {
            do_break = true;
            break;
        }
        if (mesh.u0 == 0) {
            //Printf("i [%d] += mesh.instance_cnt [%d]\n", i, mesh.instance_cnt);
            i += mesh.instance_cnt;
        } else {
            //Printf("i++ [d] [%d]\n", i, i+1);
            i--;
        }
        i++;
    }
    if (do_break)
        break;
    mesh_data_unk3 mesh_data_unk3_;
} mesh_container <bgcolor=cDkGreen, read=read_mesh_container, optimize=false, open=true>;
string read_mesh_container(mesh_container &v) {
    string s;
    SPrintf(s, "mesh# %d types ", v.mesh_count);
    local int i;
    for (i = 0; i < v.mesh_count_actual; i++) {
        if (v.mesh[i].u0 == 0)
            SPrintf(s, "%s %d", s, v.mesh[i].type);
        else
            SPrintf(s, "%s [%d]", s, v.mesh[i].u0);
    }

    return s;
}


typedef struct mesh_container_outer_c2_t {
    u16 c3;
    u16 c4;
    u32 c5 <format=decimal>;
    u8 flags;
    if ((flags & 1) == 0) {
        if ((flags & 2) != 0) {
            f32 c6;
            f32 c7;
        }
    } else {
        f32 c8;
    }
    if ((flags & 4) != 0) {
        u8 c9;
    }
    if ((flags & 8) != 0) {
        u8 c10;
        f32 c11;
        vec3 c12_mat_0;
        vec3 c12_mat_1;
        vec3 c12_mat_2;
        vec3 c12_mat_3;
        u8 c13;
        u8 c14;
        u32 c15;
    }
    if ((flags & 0x10) != 0) {
        u8 c16;
        f32 c17;
        f32 c18;
    }
    if ((flags & 0x20) != 0) {
        vec3 c19;
    }
    if (c4 < 0x10) {
        local u64 uVar8 = 1 << ((u64)(u32)c4 & 0x7F);
        if ((uVar8 & 0xA001) == 0) {
            if ((uVar8 & 0x4100) == 0) {
                vec3 c22_mat_0;
                vec3 c22_mat_1;
                vec3 c22_mat_2;
                vec3 c22_mat_3;
            } else {
                u16 c20;
            }
        } else {            
            vec3 c21_mat_0;
            vec3 c21_mat_1;
            vec3 c21_mat_2;
            vec3 c21_mat_3;
        }
    } else {        
        vec3 c22_mat_0;
        vec3 c22_mat_1;
        vec3 c22_mat_2;
        vec3 c22_mat_3;
    }
} mesh_container_outer_c2 <bgcolor=cDkRed, optimize=false, read=read_mesh_container_outer_c2>;
string read_mesh_container_outer_c2(mesh_container_outer_c2 &v) {
    string s;
    SPrintf(s, "flags: %02X c: %04X %04X %08X",
        v.flags, v.c3, v.c4, v.c5);
    return s;
}

typedef struct ca_t {
    u16 ca0;
    u16 ca1;
    u16 ca2;
    vec3 ca3;
    u16 ca4;
    vec3 ca5;
} ca <bgcolor=cRed>;
typedef struct cb_t {
    u16 cb0;
    u16 cb1;
    u8 cb2;
    u8 cb3;
} cb <bgcolor=cDkRed>;
typedef struct cc_t {
    u8 cc0;
    f32 cc1;
    f32 cc2;
    f32 cc3;
    f32 cc4;
    vec3 cc5;
    vec3 cc6;
    u8 cc7_cnt;
    if (cc7_cnt > 0)
        u16 cc7[cc7_cnt];
} cc <bgcolor=cAqua>;

typedef struct cd5_t {
    u16 cd5_0;
    u16 cd5_1;
    u16 cd5_2;
} cd5 <bgcolor=cDkBlue>;

typedef struct cd_t {
    u16 cd0;
    u16 cd1_ign;
    u16 cd2_ign;
    f32 cd3_ign[4]; // ?
    u8 cd4;
    if (cd4 > 0)
        cd5 cd5_[cd4];
} cd <bgcolor=cDkYellow, optimize=false>;

typedef struct c6a_t {
    u16 c6a0_count;
    if (c6a0_count > 0)
        vec3 c6a0[c6a0_count];
    u16 cd_count;
    u16 c6a2;
    if (cd_count > 0)
        cd cd_[cd_count];
} c6a <bgcolor=cBlue>;

struct c7b {
    u16 c7b0;
    u32 c7b1;
    u32 c7b2;
};

typedef struct c7a_t {
    u32 c70;
    u32 c71;
    u32 c72;
    c7b c7b_[c70];
} c7a <bgcolor=cLtGreen>;

typedef struct c6_t {
    u16 c6_0;
    u32 c6_1;
    u8 c6_2;
    u8 c6_3;
    f32 c6_4;
    c6a c6a_;
    c7a c7a_;
    u32 c8a;
    u16 c9a;
    u16 c10a;
    u8 c11a;
} c6 <optimize=false, bgcolor=cLtRed, open=true>;

typedef struct c9_t {
    s16 d1;
    //Printf("d1 0x%X\n",d1);
    if (d1 >= 0) {
        local u16 uVar1 = (u64)(uint)((int)d1 << 3) + (u64)(uint)((int)d1 << 5);
        //Printf("uVar1 0x%X\n",uVar1);
    }
} c9 <optimize=false, bgcolor=cLtBlue>;

typedef struct mesh_container_outer_t {
    u16 c2_cnt;
    if (c2_cnt > 0)
        mesh_container_outer_c2 mco_c2[c2_cnt];

    u8 ca_count;
    if (ca_count > 0)
        ca ca_[ca_count];
    u8 cb_count;
    if (cb_count > 0)
        cb cb_[cb_count];
    u8 cc_count;
    if (cc_count > 0)
        cc cc_[cc_count];

    u16 c3;
    u16 c4;
    u16 c5;

    u32 c1;
    mesh_container mc;
    if (skip_mco) {
        Printf("[%08X] skipping mco\n", FTell());
        break;
    }

    u16 c6_count;
    if (c6_count > 0) {
        c6 c6_[c6_count];
        f32 c7;
        vec3 c8_mat3_0;
        vec3 c8_mat3_1;
        vec3 c8_mat3_2;
    }

    c9 c9_;

} mesh_container_outer <bgcolor=cGreen, read=read_mesh_container_outer, optimize=false>;
string read_mesh_container_outer(mesh_container_outer &v) {
    string s;
    // TODO c6_count
    SPrintf(s, "c2# %d abc# %d %d %d mc: %s", 
        v.c2_cnt, v.ca_count, v.cb_count, v.cc_count, read_mesh_container(v.mc));
    return s;
}

// Textures

typedef struct texture_cont_header_t {
    u32 data_size;
    u32 _ign; // not sure if actually ignored
} texture_cont_header <optimize=false, bgcolor=cBlue>;

typedef struct texture_clut_t {
    u32 h0;
    bool inline_disable; // if != 1, data is 'inline'. rare
    u8 h2_count;
    u8 h3;
    u8 h4;
    u16 inline_data_size;
    u8 format_size;
    u8 h7;
    u32 data_offset;

    if (h2_count > 0)
        u16 h2[h2_count];

    if (inline_disable != 1 && inline_data_size > 0)
        u8 inline_data[inline_data_size * format_size];
} texture_clut <optimize=false, read=read_texture_clut, bgcolor=cDkGreen>;
string read_texture_clut(texture_clut &v) {
    string s;
    SPrintf(s, "%05X %X %X %X %X %X %X %X %X",
        v.h0, v.inline_disable, v.h2_count, v.h3, v.h4, v.inline_data_size, v.format_size, v.h7, v.data_offset);
    return s;
}

typedef struct texture_image_t {
    u32 h0;
    bool inline_disable; // if != 1, data is 'inline'. rare
    u8 h2_count;
    u8 h3;
    u8 h4;
    u16 width;
    u16 height;
    u8 psm_register; // Pixel Storage Mode PS2 register
    u8 tbw_register; // Texture buffer width PS2 register
    u16 h9; // width again?
    u32 inline_data_size;
    u32 data_offset;

    if (h2_count > 0)
        u16 h2[h2_count];

    if (inline_disable != 1 && inline_data_size > 0)
        u8 inline_data[inline_data_size];
} texture_image <optimize=false, read=read_texture_image, bgcolor=cRed>;
string read_texture_image(texture_image &v) {
    string s;
    SPrintf(s, "%05X %X %X %X %X %X %X %X %X %3X %4X %X",
        v.h0, v.inline_disable, v.h2_count, v.h3, v.h4, v.width, v.height, v.psm_register, v.tbw_register,
        v.h9, v.inline_data_size, v.data_offset);
    return s;
}

typedef struct tex_y1_t {
    u32 z0;
    u16 z1;
    u8 image_count;
    u8 clut_count;

    if (image_count > 0)
        u16 images[image_count];

    if (clut_count > 0)
        u16 cluts[clut_count];
} tex_y1 <optimize=false, read=read_tex_y1, bgcolor=cGreen>;
string read_tex_y1(tex_y1 &v) {
    string s;
    SPrintf(s, "%X %X %X %X",
        v.z0, v.z1, v.image_count, v.clut_count);
    return s;
}

typedef struct tex_unk2_t {
    u8 y0[0x17];
    u8 y1_count;
    u16 y2;
    if (y1_count > 0)
        tex_y1 tex_y1_[y1_count];
} tex_unk2 <optimize=false, read=read_tex_unk2, bgcolor=cRed>;
string read_tex_unk2(tex_unk2 &v) {
    string s;
    SPrintf(s, "%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X %X %X",
        v.y0[0], v.y0[1], v.y0[2], v.y0[3],
        v.y0[4], v.y0[5], v.y0[6], v.y0[7],
        v.y0[8], v.y0[9], v.y0[10], v.y0[11],
        v.y0[12], v.y0[13], v.y0[14], v.y0[15],
        v.y1_count, v.y2);
    return s;
}

typedef struct texture_cont_t (u32 tex_desc_offset) {
    texture_cont_header header;

    FSeek(tex_desc_offset);
    u16 clut_count;
    if (clut_count > 0)
        texture_clut cluts[clut_count];

    u16 image_count;
    if (image_count > 0)
        texture_image images[image_count];

    u16 i3_count;
    if (i3_count > 0)
        i3 i3_[i3_count];

    u16 tex_unk2_count;
    if (tex_unk2_count > 0)
        tex_unk2 tex_unk2_[tex_unk2_count];

    if (header.data_size > 0) {
        if (FTell() & 0xF)
            align _pad0 (16);
        u8 data[header.data_size] <bgcolor=cDkBlue>;
    }
} texture_cont <optimize=false, read=read_texture_cont, bgcolor=cDkRed>;
string read_texture_cont(texture_cont &v) {
    string s;
    SPrintf(s, "data#: %06X   clut#: %3d   image#: %3d",
        v.header.data_size, v.clut_count, v.image_count);
    return s;
}

//
// Object allocation
//

local int parse_meshes = 1;
local int parse_textures = 1;


// f_nightclub_rxterior
local int objectOffsets[287] = { 0x0FD1A0, 0x0FD560, 0x10C420, 0x113EA0, 0x114C10, 0x116590, 0x117F10, 0x119900, 0x11B290, 0x13EA00, 0x140350, 0x141CF0, 0x159F50, 0x15ACD0, 0x15C670, 0x1629E0, 0x168C20, 0x1D6C80, 0x1ECD50, 0x1EE6F0, 0x1F3590, 0x1F4F00, 0x1F4F80, 0x20ECA0, 0x220EE0, 0x2242D0, 0x225C30, 0x2276E0, 0x23CFA0, 0x248880, 0x24A220, 0x24EBB0, 0x25D990, 0x26F8D0, 0x291490, 0x2A9EB0, 0x2EC060, 0x2EE4D0, 0x2F4720, 0x2F60C0, 0x2FEDA0, 0x314B50, 0x32A880, 0x394170, 0x3A3030, 0x3A3B30, 0x3A8200, 0x3AA360, 0x3AB090, 0x3B57F0, 0x3B6540, 0x42D320, 0x42ECB0, 0x430650, 0x43E870, 0x44DE30, 0x471CF0, 0x480990, 0x491880, 0x493230, 0x525B50, 0x526870, 0x5340F0, 0x535500, 0x592630, 0x596FB0, 0x59B930, 0x59D2E0, 0x5A9600, 0x5B3C10, 0x5C0070, 0x5CA750, 0x5CD970, 0x5CDBB0, 0x5CF520, 0x5D7500, 0x5DA550, 0x5E0820, 0x5E9260, 0x5F5580, 0x5F63B0, 0x6085F0, 0x608FE0, 0x62B250, 0x62CBE0, 0x6347F0, 0x636170, 0x639340, 0x63DCD0, 0x654750, 0x655CE0, 0x65BEE0, 0x65BF60, 0x662180, 0x6D4BD0, 0x6DAE30, 0x6DBB30, 0x6E96C0, 0x730CF0, 0x735660, 0x736FF0, 0x73A9B0, 0x751430, 0x75D750, 0x769A70, 0x803D50, 0x8072C0, 0x80CED0, 0x81B3A0, 0x8286A0, 0x83C8C0, 0x83DA50, 0x83E7C0, 0x83F560, 0x84BFE0, 0x84D990, 0x876800, 0x88AAE0, 0x895220, 0x8A9EE0, 0x8BA460, 0x8C4CF0, 0xA1DBE0, 0xA25740, 0xA2A4F0, 0xA32200, 0xA32F50, 0xA4E6A0, 0xA53E70, 0xA5B9E0, 0xA6CE90, 0xA73E40, 0xA79200, 0xA7C8A0, 0xA83AE0, 0xC87BF0, 0xC89590, 0xC8A2E0, 0xC8D4A0, 0xC8EE20, 0xC93780, 0xC95120, 0xC99AA0, 0xC9A810, 0xC9C170, 0xCA5F30, 0xCA7890, 0xCA85F0, 0xDA03A0, 0xDCFB60, 0xDD2E70, 0xDD6030, 0xDDA990, 0xE35320, 0xE775A0, 0xE7FB40, 0xE8AE20, 0xE8C790, 0xE8E100, 0xE8FA90, 0xE943F0, 0xE94470, 0xEA6E60, 0xEA8820, 0xEAA190, 0xEABB30, 0xEAD4D0, 0xEAE230, 0xEB0D40, 0xEB26E0, 0xEB7040, 0xEEBB50, 0xEF1AC0, 0xEF7D00, 0xEF9660, 0x10822F0, 0x1088550, 0x1089EE0, 0x108B850, 0x10A7740, 0x10A84C0, 0x10A9E60, 0x123EAD0, 0x1249C20, 0x125D750, 0x1267100, 0x1267AF0, 0x1268840, 0x12752C0, 0x1276C50, 0x12779C0, 0x12804C0, 0x1286730, 0x12CD030, 0x12D02C0, 0x12D1020, 0x12D80F0, 0x12EA330, 0x12F0560, 0x12FE5C0, 0x12FFF50, 0x13B8C00, 0x13C0770, 0x13C3920, 0x13CE700, 0x13D00C0, 0x13D0E40, 0x13D27D0, 0x13DEAF0, 0x13DF880, 0x13E05E0, 0x13ED060, 0x140C9A0, 0x14149A0, 0x1420CC0, 0x1421A10, 0x1439F00, 0x14403A0, 0x1441D30, 0x144DD10, 0x144F680, 0x14558E0, 0x1461BE0, 0x146DEE0, 0x146F870, 0x14705D0, 0x1471330, 0x1473A70, 0x1789E10, 0x17903A0, 0x17E14F0, 0x1845210, 0x1859990, 0x185E300, 0x1863BF0, 0x1865570, 0x1874F30, 0x1886960, 0x189C220, 0x18D4F50, 0x18D5CB0, 0x18D7620, 0x18D8FA0, 0x18D9D10, 0x18DB6A0, 0x18E0CB0, 0x1C13020, 0x1C13AA0, 0x1C15170, 0x1C448E0, 0x1C842B0, 0x1C8CBB0, 0x1C92CF0, 0x1CB65E0, 0x1CBAF50, 0x1CC11B0, 0x1CC2B50, 0x1CC8DB0, 0x1DDE2B0, 0x1F16D60, 0x1F186D0, 0x1F18750, 0x1F294A0, 0x1F2D150, 0x1F40BC0, 0x1F58C00, 0x1F5A5A0, 0x1F5A620, 0x1F5D870, 0x1F68F40, 0x1F7ACD0, 0x1F7C670, 0x1F7C6F0, 0x1F87D50, 0x1F93FE0, 0x1F973B0, 0x1FA3350, 0x1FAA9E0, 0x1FB22E0, 0x1FBD0A0, 0x1FC3680, 0x206C0F0, 0x206DA90, 0x2082520, 0x20825A0, 0x208F710, 0x208F830 };
local int textureDescOffsets[287] = { 0x0FD1B0, 0x0FE422, 0x10C430, 0x113EB0, 0x114C20, 0x1165A0, 0x117F20, 0x119910, 0x11C200, 0x13EA10, 0x140360, 0x141D00, 0x159F60, 0x15ACE0, 0x15C680, 0x1629F0, 0x168C30, 0x1D6C90, 0x1ECD60, 0x1EE700, 0x1F35A0, 0x1F4F10, 0x1F4F90, 0x20ECB0, 0x220EF0, 0x2242E0, 0x225C40, 0x2276F0, 0x23D1CE, 0x248890, 0x24A230, 0x24EBC0, 0x25D9A0, 0x26F8E0, 0x291990, 0x2A9EC0, 0x2EC070, 0x2EE4E0, 0x2F4730, 0x2F6A89, 0x2FFF25, 0x314B60, 0x32B3C2, 0x395030, 0x3A3040, 0x3A3B40, 0x3A8210, 0x3AA370, 0x3AB0A0, 0x3B5800, 0x3B683C, 0x42D330, 0x42ECC0, 0x430660, 0x43F72B, 0x44DE40, 0x471D00, 0x4809A0, 0x491890, 0x4DF1C9, 0x525B60, 0x526880, 0x534100, 0x535510, 0x592640, 0x596FC0, 0x59B940, 0x59D2F0, 0x5A9610, 0x5B3C20, 0x5C03A5, 0x5CA760, 0x5CD980, 0x5CDBC0, 0x5CF530, 0x5D7510, 0x5DA560, 0x5E0830, 0x5E9270, 0x5F635F, 0x5F63C0, 0x608600, 0x608FF0, 0x62B260, 0x62CBF0, 0x634800, 0x636180, 0x639350, 0x63DCE0, 0x654760, 0x655CF0, 0x65BEF0, 0x65BF70, 0x662190, 0x6D4BE0, 0x6DAE40, 0x6DBB40, 0x6E96D0, 0x730D00, 0x735670, 0x737F95, 0x73A9C0, 0x751440, 0x75D760, 0x76EDC0, 0x803D60, 0x8074F1, 0x80CEE0, 0x81B3B0, 0x8286B0, 0x83CD0E, 0x83DA60, 0x83E7D0, 0x83F570, 0x84BFF0, 0x84D9A0, 0x877A17, 0x88AAF0, 0x895230, 0x8AA1B3, 0x8BA470, 0x8CC0AF, 0xA1DBF0, 0xA25750, 0xA2A500, 0xA32210, 0xA33EBD, 0xA4E6B0, 0xA547F0, 0xA5B9F0, 0xA6CEA0, 0xA74170, 0xA7C810, 0xA7D172, 0xA924B7, 0xC87C00, 0xC895A0, 0xC8A2F0, 0xC8D4B0, 0xC8EE30, 0xC93790, 0xC95130, 0xC99AB0, 0xC9A820, 0xC9C180, 0xCA5F40, 0xCA78A0, 0xCAF39E, 0xDA03B0, 0xDCFB70, 0xDD2E80, 0xDD6040, 0xDDA9A0, 0xE35888, 0xE7800B, 0xE7FB50, 0xE8AE30, 0xE8C7A0, 0xE8E110, 0xE8FAA0, 0xE94400, 0xE94B4F, 0xEA6E70, 0xEA8830, 0xEAA1A0, 0xEABB40, 0xEAD4E0, 0xEAEBF4, 0xEB0D50, 0xEB26F0, 0xEBA919, 0xEEBB60, 0xEF1AD0, 0xEF7D10, 0xEFA51C, 0x1082300, 0x1088560, 0x1089EF0, 0x108C5F0, 0x10A7750, 0x10A84D0, 0x10AA915, 0x123F45B, 0x1249C30, 0x125D760, 0x1267110, 0x1267B00, 0x1268850, 0x12752D0, 0x1276C60, 0x127800D, 0x12804D0, 0x1286FE0, 0x12CD040, 0x12D02D0, 0x12D1030, 0x12D8100, 0x12EA340, 0x12F08C2, 0x12FE5D0, 0x13047CB, 0x13B8C10, 0x13C0780, 0x13C457D, 0x13CE710, 0x13D00D0, 0x13D0E50, 0x13D27E0, 0x13DEB00, 0x13DF890, 0x13E05F0, 0x13ED3FC, 0x140CD8C, 0x14149B0, 0x1420CD0, 0x1421A20, 0x1439F10, 0x14403B0, 0x1442336, 0x144DD20, 0x144F690, 0x14558F0, 0x1461BF0, 0x146DEF0, 0x146F880, 0x14705E0, 0x1471B64, 0x147A9E0, 0x1789E20, 0x1794EC6, 0x17E2112, 0x18464DD, 0x18599A0, 0x185E310, 0x1863C00, 0x1865580, 0x1874F40, 0x1886970, 0x189CB66, 0x18D4F60, 0x18D5CC0, 0x18D7630, 0x18D8FB0, 0x18D9D20, 0x18DBC7E, 0x18E3808, 0x1C13030, 0x1C13AB0, 0x1C15866, 0x1C48F2A, 0x1C84C3E, 0x1C9285F, 0x1C92D00, 0x1CB65F0, 0x1CBAF60, 0x1CC11C0, 0x1CC2B60, 0x1CCD855, 0x1DED2EA, 0x1F16D70, 0x1F186E0, 0x1F18760, 0x1F294B0, 0x1F2E015, 0x1F40BD0, 0x1F58C10, 0x1F5A5B0, 0x1F5A630, 0x1F5D880, 0x1F69775, 0x1F7ACE0, 0x1F7C680, 0x1F7C857, 0x1F88C10, 0x1F93FF0, 0x1F9769F, 0x1FA3360, 0x1FAA9F0, 0x1FB2445, 0x1FBD0B0, 0x1FC3C14, 0x206C100, 0x206DF32, 0x2082530, 0x20825B0, 0x208F720, 0x208F840 };
local int meshcontOffsets[351] = { 0x107E63,0x1106C3,0x1197A3,0x1345D3,0x136E69,0x138E5F,0x13B405,0x13BDB5,0x13DC69,0x158A26,0x158F1E,0x159416,0x160B1C,0x160EEA,0x161429,0x1D1DD3,0x1EB302,0x1EBCA4,0x1EBF97,0x1F1D12,0x1F2730,0x20E520,0x23BEC2,0x246A91,0x246F7D,0x247967,0x25B2D3,0x25CC85,0x25D451,0x26E423,0x28EB5C,0x28EFE1,0x2A831E,0x2A8EEC,0x2EAC0E,0x2EB3BE,0x2ECCF3,0x2ED867,0x2FDF82,0x2FE59C,0x310313,0x3244A3,0x373733,0x382E88,0x3834B9,0x38739B,0x387C56,0x391598,0x3926C4,0x39EA73,0x3A38B3,0x3A7FB3,0x3A9A93,0x3B3463,0x3B4D47,0x42A57E,0x42AB38,0x42BC90,0x42C6AE,0x43C489,0x43E48A,0x449583,0x47ED0C,0x47FF84,0x490222,0x490DF0,0x4E2436,0x530783,0x5346C3,0x5C5703,0x5C8175,0x5CB0E3,0x5CD9A3,0x5CDA15,0x5CDAE4,0x5D6ED3,0x5D96F3,0x5E06A3,0x634593,0x6DB3B3,0x739813,0x7D5158,0x7D5618,0x804323,0x8043B3,0x806C62,0x806E5A,0x816E33,0x823AD3,0x8349B3,0x8746DA,0x874E9F,0x875400,0x8828D3,0x892BB2,0x89309E,0x894149,0x8A79BC,0x8A8181,0x8A8856,0x8B9D32,0x8C1FF6,0x924B73,0x98A8C1,0x9955A0,0x99943E,0x9A5C7E,0x9AAC13,0x9B406E,0x9B785B,0x9C1B68,0x9C5928,0x9CDB42,0x9D06D4,0x9DAAB5,0x9DE7D7,0x9E8627,0x9EBC0B,0x9F2230,0x9F4FB5,0x9FC1C4,0x9FF638,0xA022DD,0xA03265,0xA0FF5B,0xA14F0B,0xA16DFE,0xA17BBC,0xA1BC55,0xA1F5D3,0xA26FD3,0xA2CB93,0xA3C583,0xA4D2ED,0xA4E3F8,0xA50D13,0xA572E3,0xA59521,0xA59960,0xA5B796,0xA75FB3,0xA819F3,0xA81A67,0xC33F91,0xC357AF,0xC35BF6,0xC3654D,0xC368CA,0xCA459A,0xD5B310,0xD5B84C,0xD5C74C,0xD5D64C,0xDAE2B3,0xDD2C33,0xE0DF33,0xE322D9,0xE34C61,0xE6C193,0xE78633,0xE78708,0xE78C0C,0xE7EF75,0xE87493,0xEA5B5A,0xEE6D2F,0xEE7AC7,0xEE8319,0xEE9A3A,0xEEAA44,0xEEE1F3,0x1011177,0x1011376,0x1012BB3,0x1016D07,0x1017455,0x1017E5B,0x1017EFE,0x1018BBE,0x12174D0,0x121A72F,0x1241F43,0x1245F36,0x1246173,0x12499D2,0x125AA73,0x125AB03,0x125D0AA,0x125D2B7,0x1264B43,0x1267133,0x127D303,0x127E211,0x12BFBB4,0x12BFE02,0x12C0E77,0x12C2037,0x12C254F,0x12C2D90,0x12C3A42,0x12C417C,0x13B6ED6,0x13B7709,0x13BC953,0x13CD791,0x1413303,0x1413B12,0x1440073,0x144C02A,0x144CF18,0x14733E3,0x1677B53,0x167ADB2,0x167B1A4,0x167B8C6,0x167D48D,0x167EAB8,0x167FCDE,0x167FF2C,0x168017A,0x1680AB6,0x1680B79,0x1681E14,0x1682E15,0x168368E,0x1684CDC,0x1687192,0x16875A7,0x16884B5,0x1688C85,0x1689455,0x1689C25,0x168A3F5,0x168ABC5,0x168B395,0x168BE4D,0x168BEBF,0x17DB3D9,0x17DF848,0x182ECA3,0x18579C3,0x18711CA,0x1871E4A,0x1872D5B,0x1881543,0x189B142,0x18C880B,0x18C8CF7,0x18C950D,0x18C9D92,0x18CCC95,0x18CEDB7,0x18D0EF5,0x18DD523,0x18DD609,0x18DFB0E,0x1AF3EE9,0x1AF6231,0x1AF891F,0x1AF9F3A,0x1AFADF7,0x1AFBDC3,0x1AFC997,0x1AFD87F,0x1AFDC08,0x1AFFB82,0x1AFFEED,0x1B01428,0x1B0149A,0x1B0206D,0x1B02C40,0x1B03813,0x1B043E6,0x1B04FB9,0x1B05B8C,0x1B069FA,0x1B21073,0x1B2111E,0x1B21EBD,0x1C14F23,0x1C2F993,0x1C41969,0x1C87753,0x1C8A121,0x1C8A35E,0x1C8C969,0x1C92883,0x1CB21C3,0x1CB2843,0x1CB2AFB,0x1DDB9EF,0x1DDC8E6,0x1E7F953,0x1EB00E6,0x1EB189A,0x1EB1AE2,0x1EB1D2A,0x1EB21E1,0x1EB3477,0x1EB3B4E,0x1EB3D8D,0x1EB7BE9,0x1EB80CD,0x1EB88BD,0x1EBF834,0x1EBFC63,0x1EC6D7B,0x1EC7079,0x1EC770D,0x1EC7D56,0x1EE92C7,0x1EE9467,0x1EEC2A2,0x1EEC4F0,0x1EEC73E,0x1EFB29C,0x1F05C2F,0x1F0FADF,0x1F1005D,0x1F1432D,0x1F14610,0x1F147B0,0x1F20B23,0x1F2C28E,0x1F2C6CF,0x1F3BA53,0x1F56E58,0x1F57509,0x1F580D7,0x1F62F13,0x1F76D89,0x1F78644,0x1F79C6A,0x1F7A47F,0x1F8EE53,0x1F9FA96,0x1FA1DE1,0x1FA9513,0x1FA9DB4,0x1FAFCA3,0x1FC3193,0x20540E3,0x20633AE,0x20638EA,0x206AFB5,0x206B720,0x207D0D3,0x2081B7D,0x2517B33,0x2D06CB5,0x2D0FEFE };


// i_palace_ext
/*
local int objectOffsets[243] = {0xc7660,0xc7880,0xca060,0xcab60,0xcc4c0,0xd0b90,0xd1610,0xd2ce0,0xdcb70,0x10e960,0x11ac60,0x11c600,0x11d380,0x129680,0x1297f0,0x131a20,0x13b230,0x13cbc0,0x14ad70,0x14cf10,0x14cf90,0x151d40,0x1616f0,0x196dd0,0x19f370,0x1de280,0x1dfc10,0x211ea0,0x21e1b0,0x222b30,0x2274b0,0x22a6d0,0x22a910,0x23cb50,0x242d80,0x24f090,0x250a00,0x2589e0,0x25ecb0,0x25f6a0,0x261030,0x268c40,0x26a5c0,0x26d790,0x270e30,0x274540,0x292d70,0x294300,0x29a500,0x2a0720,0x313170,0x3193d0,0x31a0d0,0x327c60,0x36f290,0x373c00,0x375590,0x378f50,0x414a60,0x4193d0,0x41ecc0,0x41f9a0,0x421360,0x422ce0,0x423a50,0x43e6e0,0x43f180,0x440b40,0x449930,0x595170,0x596b00,0x597f10,0x5f5040,0x5f85b0,0x5fe7d0,0x600180,0x60c4a0,0x6126c0,0x613410,0x616460,0x61eea0,0x62b1c0,0x62bff0,0x64e260,0x64fbc0,0x666640,0x67d0c0,0x6893e0,0x695700,0x756d70,0x75e8e0,0x77ac60,0x78c110,0x7930c0,0x798480,0x7aa6c0,0x7b1900,0x9b5a10,0x9b7380,0xa9a010,0xa9b980,0xa9d2f0,0xa9ec80,0xaa35e0,0xaa3660,0xab6050,0xab7a10,0xab9380,0xabad20,0xabc6c0,0xabd420,0xabff30,0xac18d0,0xac6230,0xafad40,0xb00cb0,0xb06ef0,0xb08850,0xc914e0,0xca5010,0xca6960,0xca8300,0xcc9eb0,0xcd5010,0xcdfdf0,0xd33690,0xd35020,0xd41340,0xd420d0,0xd42e30,0xd4f8b0,0xd50600,0xd6ff40,0xd75710,0xd7d710,0xd89a30,0xd8a780,0xda2c70,0xda9110,0xdaaaa0,0xdb6a80,0xdb83f0,0xdbe650,0xdca950,0xdd6c50,0xdd85e0,0xdd9340,0xdda0a0,0xddc7e0,0x10f2b80,0x10fa890,0x10fb5f0,0x10fcf60,0x10fe8e0,0x10ff650,0x1100fe0,0x11065f0,0x1438960,0x1478330,0x1480c30,0x14c3e10,0x14c4f70,0x14e8860,0x14ed1d0,0x14f3430,0x14f4dd0,0x14fb030,0x1610530,0x166ba90,0x166c810,0x1678b30,0x1684e50,0x1684f70,0x1686900,0x16a6b30,0x16a8c90,0x16a99c0,0x16c8760,0x16cd630,0x16cefd0,0x16e0d60,0x16e0f80,0x16e6e30,0x16e87d0,0x1740cc0,0x1742660,0x1768e80,0x17e7660,0x17f27b0,0x181b380,0x181cd30,0x1828ce0,0x182a680,0x183eda0,0x184f170,0x1896bc0,0x189f660,0x18a84f0,0x18b1420,0x18ba140,0x18f0260,0x19137d0,0x1915170,0x1916b10,0x1972320,0x1a2fa30,0x1a313d0,0x1a8dae0,0x1a8f480,0x1aa7600,0x1ab6c10,0x1ab7930,0x1ab7b50,0x1abc4e0,0x1ad3300,0x1ad3520,0x1ad42a0,0x1ae0d20,0x1ae70b0,0x1ae71d0,0x1ae7f40,0x1b4a6c0,0x1b580c0,0x1b65350,0x1bfa790,0x1bfe480,0x1bffe10,0x1c250b0,0x1c26b70,0x1cf4f10,0x1cf7270,0x1d08c30,0x1d54c90,0x1d56630,0x1d6e3f0,0x1d6fd90,0x1d6fe10,0x1d80f00,0x1d80fd0,0x1da8980,0x1daa310,0x1daa530,0x1dbc3d0};
local int textureDescOffsets[243] = {0xc7670,0xc7890,0xca070,0xcab70,0xcc4d0,0xd0ba0,0xd1620,0xd2cf0,0xdcb80,0x10e970,0x11ac70,0x11c610,0x11d390,0x129690,0x129800,0x131b83,0x13b240,0x13d966,0x14ad80,0x14cf20,0x14cfa0,0x15255f,0x161700,0x19783b,0x19f60b,0x1de290,0x1dfc20,0x211eb0,0x21e1c0,0x222b40,0x2274c0,0x22a6e0,0x22a920,0x23cb60,0x242d90,0x24f0a0,0x250a10,0x2589f0,0x25ecc0,0x25f6b0,0x261040,0x268c50,0x26a5d0,0x270da0,0x270e40,0x2748a8,0x292d80,0x294310,0x29a510,0x2a0730,0x313180,0x3193e0,0x31a0e0,0x327c70,0x36f2a0,0x373c10,0x376535,0x37cc6f,0x414a70,0x4193e0,0x41ecd0,0x41f9b0,0x421370,0x422cf0,0x4247ee,0x43e6f0,0x43f190,0x4430a8,0x449c31,0x595180,0x596b10,0x597f20,0x5f5050,0x5f85c0,0x5fe7e0,0x600190,0x60c4b0,0x6126d0,0x613420,0x616470,0x61eeb0,0x62bf9f,0x62c002,0x64e270,0x64fbd0,0x666650,0x67d0d0,0x6893f0,0x69adbb,0x7576f0,0x75e8f0,0x77ac70,0x78c120,0x7933f0,0x798490,0x7aaf92,0x7c02d7,0x9b5a20,0x9babaa,0xa9a020,0xa9b990,0xa9d300,0xa9ec90,0xaa35f0,0xaa3d3f,0xab6060,0xab7a20,0xab9390,0xabad30,0xabc6d0,0xabdde4,0xabff40,0xac18e0,0xac9b09,0xafad50,0xb00cc0,0xb06f00,0xb0970c,0xc914f0,0xca5020,0xca6970,0xca8310,0xcc9ec0,0xcd5c6d,0xce0c1c,0xd336a0,0xd35030,0xd41350,0xd420e0,0xd42e40,0xd4f8c0,0xd5099c,0xd6ff50,0xd75afc,0xd7d720,0xd89a40,0xd8a790,0xda2c80,0xda9120,0xdab0a6,0xdb6a90,0xdb8400,0xdbe660,0xdca960,0xdd6c60,0xdd85f0,0xdd9350,0xdda8d4,0xde3750,0x10f2b90,0x10fa8a0,0x10fb600,0x10fcf70,0x10fe8f0,0x10ff660,0x11015be,0x1109148,0x143cfaa,0x1478cbe,0x1480c40,0x14c4ae2,0x14c4f80,0x14e8870,0x14ed1e0,0x14f3440,0x14f4de0,0x14ffad5,0x1614c27,0x166baa0,0x166c820,0x1678b40,0x1684e60,0x1684f80,0x1686910,0x16a6b40,0x16a8ca0,0x16a9b23,0x16c8770,0x16cd640,0x16cf1fd,0x16e0d70,0x16e0f90,0x16e6e40,0x16efbc3,0x1740cd0,0x1743d64,0x176c672,0x17e7feb,0x17f486b,0x181b390,0x181cd40,0x1828cf0,0x182a690,0x1841237,0x1852226,0x1896bd0,0x189f670,0x18a8500,0x18b1430,0x18c2f26,0x18f0270,0x19137e0,0x1915180,0x1917286,0x1977bdf,0x1a2fa40,0x1a313e0,0x1a8daf0,0x1a8f980,0x1aa83a0,0x1ab6c20,0x1ab7940,0x1ab7b60,0x1abc9d5,0x1ad3310,0x1ad3530,0x1ad42b0,0x1ae0d30,0x1ae70c0,0x1ae71e0,0x1ae7f50,0x1b4a6d0,0x1b580d0,0x1bae104,0x1bfa7a0,0x1bfe490,0x1bffe20,0x1c250c0,0x1c2940d,0x1cf4f20,0x1cf757f,0x1d0b17f,0x1d54ca0,0x1d56b3c,0x1d6e400,0x1d6fda0,0x1d6fe20,0x1d80f10,0x1d80fe0,0x1da8990,0x1daa320,0x1daa540,0x1dbc3e0};
local int meshcontOffsets[308] = {0xca8e3,0xd0943,0xd2a93,0xd99ab,0x12fd43,0x14c603,0x14e823,0x15c0c3,0x15e93e,0x17f163,0x195c26,0x197e63,0x197f38,0x19843c,0x19e7a5,0x200f73,0x20152a,0x227e43,0x22a703,0x22a775,0x22a844,0x2583b3,0x25eb33,0x2689e3,0x2736c3,0x291b9c,0x291fc4,0x319953,0x377db3,0x40f1a3,0x411829,0x43e2a4,0x447b13,0x447b8b,0x447dc6,0x448eea,0x4b2d0a,0x4b372d,0x4b4150,0x4b4b9a,0x4b560b,0x4b6ab5,0x4c5fbc,0x4c8b20,0x4cb60a,0x4ce186,0x4d222f,0x4d619e,0x4da1a9,0x4de077,0x4e08fe,0x4f0f52,0x4f2f80,0x50feae,0x510116,0x510c45,0x512992,0x513dfc,0x51644e,0x5178e1,0x519f7b,0x51b4c2,0x51db26,0x51ef8e,0x5215b5,0x52294a,0x524ff6,0x526476,0x528ac2,0x529e96,0x52c620,0x52da98,0x5300d0,0x5315c5,0x53366e,0x5570cc,0x5747c7,0x5970d3,0x5f5613,0x5f56a3,0x5f7f52,0x5f814a,0x615603,0x71268a,0x712c5f,0x7151b5,0x715d8d,0x75a1e3,0x75c421,0x75c860,0x75e696,0x76fcb3,0x795233,0x7af813,0x7af887,0x9635cf,0x963a16,0x96436d,0x9646ea,0xa6b0f3,0xa8936b,0xa91b6b,0xa957e3,0xa95ff7,0xa997fd,0xab4d4a,0xaf5f1f,0xaf6cb7,0xaf7509,0xaf8c2a,0xaf9c34,0xafd3e3,0xc20367,0xc20566,0xc21da3,0xc25ef7,0xc26645,0xc2704b,0xc270ee,0xc27dae,0xca2333,0xca23c3,0xca496a,0xca4b77,0xcc8c5c,0xcc94c0,0xcd0fa3,0xcdee81,0xd725b3,0xd7c073,0xd7c882,0xda8de3,0xdb4d9a,0xdb5c88,0xddc153,0xfe08c3,0xfe3b22,0xfe3f14,0xfe4636,0xfe61fd,0xfe7828,0xfe8a4e,0xfe8c9c,0xfe8eea,0xfe9826,0xfe98e9,0xfeab84,0xfebb85,0xfec3fe,0xfeda4c,0xfeff02,0xff0317,0xff1225,0xff19f5,0xff21c5,0xff2995,0xff3165,0xff3935,0xff4105,0xff4bbd,0xff4c2f,0x10f5223,0x1102e63,0x1102f49,0x110544e,0x12fefdd,0x1319829,0x131bb71,0x131e25f,0x131f87a,0x1320737,0x1321703,0x13222d7,0x13231bf,0x1323548,0x13254c2,0x1326d68,0x1326dda,0x13279ad,0x1328580,0x1329153,0x1329d26,0x132a8f9,0x132b4cc,0x132c33a,0x13469b3,0x1346a5e,0x13477fd,0x147b7d3,0x147e1a1,0x147e3de,0x14809e9,0x14b2f03,0x14c4b03,0x14e4443,0x14e4ac3,0x14e4d7b,0x160dc6f,0x160eb66,0x1626503,0x1657b23,0x166797a,0x1667dda,0x1668532,0x1668b56,0x1668d81,0x1695413,0x16a83c3,0x16cd03a,0x16ddcb5,0x16de2c1,0x16df2eb,0x16e6ba1,0x1726443,0x172a162,0x172aa3d,0x172beac,0x173e6b3,0x173f824,0x17e5acc,0x17e61df,0x17eaad3,0x17eeac6,0x17eed03,0x17f2562,0x1812c8d,0x18195fc,0x1819b7a,0x18269b4,0x1827926,0x1828136,0x183e6bb,0x184c8f3,0x189255d,0x1893238,0x189383f,0x18944ec,0x1895199,0x1895e46,0x189ea83,0x18a7523,0x18b07f3,0x18b8b23,0x18b9e8b,0x18efdd1,0x18f7cd3,0x1944ad3,0x196de8d,0x19e8e7a,0x19ec7ab,0x19ec9de,0x19ee2d8,0x19ee6c7,0x19f05c8,0x1a056ef,0x1a1a816,0x1a8a133,0x1aa5bee,0x1aa6548,0x1aa6ea2,0x1ab62c9,0x1ad0d98,0x1ad12da,0x1ad1df7,0x1ad2a43,0x1b24983,0x1b44c63,0x1b579dc,0x1b6473c,0x1bfd023,0x1c244a8,0x1cb97d3,0x1ccd3a8,0x1ccdfbb,0x1cdbffe,0x1cf47da,0x1cf5ba3,0x1d04a87,0x1d07779,0x1d086f2,0x1d42f40,0x1d4398a,0x1d43bd8,0x1d44b05,0x1d549b4,0x1d54b24,0x1d69388,0x1d6af76,0x1d6c258,0x1d6cadd,0x1d6d443,0x1d806a3,0x1da6860,0x1da7488,0x1da7c59,0x1dbb731,0x2253fa3,0x2bf2a1e,0x2bf2cab,0x2bf3ebb,0x2bf9543,0x2bfaa20,0x2bfcd8b,0x2c030c9,0x2c051cc,0x2c07f58,0x2c0a935,0x2c182dd};
*/

local int i;

//FSeek(0x451F24);
//vec4 unk_vec4[0x204];

struct Level {
    // Data starting from the beginning
    struct StartData {
        ObjectArray objects;
            StringArray string_array;
            Unk0Table unk0_table;
            WorldArray worlds;
            FkString name_current;
            // TODO: lots lots more things
    } start <open=true>;

    // TODO: associate with obj names?
    if (parse_textures != 0) {
        struct Textures {
            for (i = 0; i < sizeof(objectOffsets)/sizeof(int); i++) {
                FSeek(objectOffsets[i]);
                texture_cont texture_cont_ (textureDescOffsets[i]);
            }
        } textures;
    }

    // TODO: associate with obj names?
    if (parse_meshes != 0) {
        struct Meshes {
            for (i = 0; i < sizeof(meshcontOffsets)/sizeof(int); i++) {
                skip_mco = false;

                FSeek(meshcontOffsets[i]);
                mesh_container_outer mco;
            }
        } meshes;
    }
} level <open=true>;
